plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id 'maven-publish'
}
//repositories {
//    maven {
//        url = "https://www.cursemaven.com"
//    }
//    maven { url 'https://jitpack.io' }
//
//}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group
repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url 'http://maven.fabricmc.net/'
        name 'Fabric'
    }
    maven {
        name = 'JitPack'
        url = 'https://jitpack.io'
    }

    flatDir {
        dirs 'deps'
    }
    maven {
        name = "Cotton"
        url = uri("http://server.bbkr.space:8081/artifactory/libs-release")
    }

    jcenter()
}




dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${minecraft_version}"

    // Yarn
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"

    // Fabric Loader
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"

    // Fabric API
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}") {
//        exclude(module: "fabric-dimensions")
        exclude(module: "fabric-biome")
        exclude(module: "fabric-biome-api-v1")
        exclude module: "fabric-biome-api-v1"
        exclude module: "fabric-biome"

    }

    // ClotConfig
    modApi("me.shedaniel.cloth:config-2:${clothconfig_version}") {
        exclude(module: "fabric-api")
    }
    modApi("me.shedaniel.cloth.api:cloth-client-events-v0:${cloth_client_events_v0_version}") {
        transitive(false)
    }

    // AutoConfig
    modApi("me.sargunvohra.mcmods:autoconfig1u:${autoconfig_version}") {
        exclude module: "net.fabricmc.fabric-api"
    }

    // ModMenu
    modApi("io.github.prospector:modmenu:${modmenu_version}") {
    exclude module: "fabric-loader"
        exclude module: "net.fabricmc.fabric-api"
        exclude(module: "fabric-api")
        transitive(false)
    }
    // loads faster
    modRuntime("com.github.SuperCoder7979:databreaker:0.2.6") {
        exclude module: "fabric-loader"
        exclude module: "net.fabricmc.fabric-api"
    }
    modImplementation("io.github.cottonmc:LibCD:${libcd}") {
        exclude module: "Jankson"
        exclude module: "nbt-crafting"
    }

    compile 'org.jetbrains:annotations:16.0.2'
    testImplementation 'com.google.code.findbugs:jsr305:3.0.2'


}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

task printClasspath {
    doLast {
        print configurations.runtimeClasspath.getFiles().stream().map { it.toString() }.collect(java.util.stream.Collectors.joining(","))
    }
}